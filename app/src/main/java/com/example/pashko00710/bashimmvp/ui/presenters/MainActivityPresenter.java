package com.example.pashko00710.bashimmvp.ui.presenters;import android.content.Context;import android.content.Intent;import android.support.annotation.NonNull;import com.example.pashko00710.bashimmvp.core.DataManager;import com.example.pashko00710.bashimmvp.core.services.LoadQuotesService;import com.example.pashko00710.bashimmvp.injection.ActivityContext;import com.example.pashko00710.bashimmvp.ui.base.BasePresenter;import com.example.pashko00710.bashimmvp.ui.views.MainActivityView;import com.example.pashko00710.bashimmvp.utils.NetworkStateChecker;import javax.inject.Inject;import rx.Subscription;import rx.android.schedulers.AndroidSchedulers;public class MainActivityPresenter extends BasePresenter<MainActivityView> {    private Context context;    private DataManager dataManager;    private Subscription subscription;    @Inject    public MainActivityPresenter(@NonNull @ActivityContext Context context,                                 @NonNull DataManager dataManager) {        this.context = context;        this.dataManager = dataManager;    }    @Override    public void attach(MainActivityView mvpView) {        super.attach(mvpView);    }    public void loadQuotes() {        if (NetworkStateChecker.isNetworkAvailable(context)) {            context.startService(new Intent(context, LoadQuotesService.class));        } else {            if (isViewAttached()) getMvpView().showInternetNotAvailable();        }    }    public void getQuotes() {        subscription = dataManager.getQuotes()                .observeOn(AndroidSchedulers.mainThread())                .subscribe(quoteEntities -> {                    if (! quoteEntities.isEmpty()) getMvpView().showQuotes(quoteEntities);                    else getMvpView().showQuotesIsEmpty();                });    }    @Override    public void detach() {        super.detach();        if (subscription != null && !subscription.isUnsubscribed()) subscription.unsubscribe();    }}